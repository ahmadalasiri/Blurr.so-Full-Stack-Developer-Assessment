// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =====================================================
// Authentication Models (NextAuth.js)
// =====================================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  
  // HR Portal Relations
  employees     Employee[]
  projects      Project[]
  createdTasks  Task[]     @relation("TaskCreator")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// =====================================================
// HR Portal Models
// =====================================================

model Employee {
  id           String   @id @default(cuid())
  employeeId   String   @unique // Custom employee ID (e.g., EMP001)
  name         String
  email        String?  @unique
  joiningDate  DateTime
  basicSalary  Float    // Stored as Float for SQLite compatibility
  department   String?
  position     String?
  isActive     Boolean  @default(true)
  
  // Relations
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTasks Task[]        @relation("TaskAssignee")
  salaryRecords SalaryRecord[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([employeeId])
  @@index([email])
  @@map("employees")
}

model Project {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?      // Stored as Float for SQLite compatibility
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([status])
  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(TODO)
  estimatedHours Int?
  actualHours    Int?
  dueDate     DateTime?
  
  // Relations
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId  String?
  assignee    Employee?  @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  
  createdById String
  createdBy   User       @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  
  // Task Dependencies (future enhancement)
  dependencies Task[]    @relation("TaskDependencies")
  dependentOn  Task[]    @relation("TaskDependencies")
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([createdById])
  @@map("tasks")
}

model SalaryRecord {
  id          String   @id @default(cuid())
  
  // Time period
  month       Int      // 1-12
  year        Int
    // Salary components
  basicSalary Float    // Stored as Float for SQLite compatibility
  bonus       Float    @default(0)
  deductions  Float    @default(0)
  totalSalary Float    // Calculated field
  
  // Additional fields
  overtimeHours Int?   @default(0)
  overtimeRate  Float? @default(0)
  allowances    Float  @default(0)
  
  // Status and notes
  status      SalaryStatus @default(DRAFT)
  notes       String?
  processedAt DateTime?
  
  // Relations
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([employeeId, month, year])
  @@index([employeeId])
  @@index([month, year])
  @@index([status])
  @@map("salary_records")
}

// =====================================================
// Audit Log (Optional - for tracking important actions)
// =====================================================

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE
  entityType String  // Employee, Project, Task, etc.
  entityId  String
  oldValues Json?
  newValues Json?
  userId    String
  userEmail String
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

// =====================================================
// Enums
// =====================================================

enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  TESTING
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SalaryStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  PAID
  REJECTED
}
